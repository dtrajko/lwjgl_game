#version 150

layout ( points ) in;
layout ( triangle_strip, max_vertices = 8 ) out;

in vec3 baseColour[];

out vec3 colour;

uniform mat4 modelMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

void main(void){

	vec4 offset = vec4(-1.0, 1.0, 0.0, 0.0);
	vec4 vertexPos = offset + gl_in[0].gl_Position;
	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vertexPos;
	colour = baseColour[0] * vec3(1.0, 0.0, 0.0);
	EmitVertex();
	
	offset = vec4(-1.0, -1.0, 0.0, 0.0);
	vertexPos = offset + gl_in[0].gl_Position;
	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vertexPos;
	colour = baseColour[0] * vec3(0.0, 1.0, 0.0);
	EmitVertex();
	
	offset = vec4(1.0, 1.0, 0.0, 0.0);
	vertexPos = offset + gl_in[0].gl_Position;
	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vertexPos;
	colour = baseColour[0] * vec3(1.0, 0.0, 1.0);
	EmitVertex();
	
	offset = vec4(1.0, -1.0, 0.0, 0.0);
	vertexPos = offset + gl_in[0].gl_Position;
	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vertexPos;
	colour = baseColour[0] * vec3(0.0, 0.0, 1.0);
	EmitVertex();
	
	EndPrimitive();
	
	offset = vec4(-1.0, 1.0, 1.0, 0.0);
	vertexPos = offset + gl_in[0].gl_Position;
	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vertexPos;
	colour = baseColour[0] * vec3(1.0, 0.0, 0.0);
	EmitVertex();
	
	offset = vec4(-1.0, -1.0, 1.0, 0.0);
	vertexPos = offset + gl_in[0].gl_Position;
	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vertexPos;
	colour = baseColour[0] * vec3(0.0, 1.0, 0.0);
	EmitVertex();
	
	offset = vec4(1.0, 1.0, 1.0, 0.0);
	vertexPos = offset + gl_in[0].gl_Position;
	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vertexPos;
	colour = baseColour[0] * vec3(1.0, 0.0, 1.0);
	EmitVertex();
	
	offset = vec4(1.0, -1.0, 1.0, 0.0);
	vertexPos = offset + gl_in[0].gl_Position;
	gl_Position = projectionMatrix * viewMatrix * modelMatrix * vertexPos;
	colour = baseColour[0] * vec3(0.0, 0.0, 1.0);
	EmitVertex();
	
	EndPrimitive();

}